name: Test and release

on:
  pull_request:
    paths:
      - "**"
  push:
    branches:
      - main
    paths:
      - "**"

jobs:
  update-lock-file:
    if: github.head_ref != 'changeset-release/main'
    name: "Update lock file for PRs before checks and build"
    permissions:
      contents: write
    runs-on: "ubuntu-22.04"
    outputs:
      VERIFIED_LOCK_COMMIT: ${{ steps.sync-lock-file.outputs.VERIFIED_LOCK_COMMIT }}
    steps:
      - name: "Checkout"
        uses: "actions/checkout@v3"
        with:
          # use branch name instead of triggering ref so we can commit to the PR branch:
          ref: ${{ github.head_ref }}
          fetch-depth: 2
      - name: "Setup Node"
        uses: "actions/setup-node@v3"
        with:
          node-version-file: ".nvmrc"

      - name: "Install dependencies with yarn cache"
        uses: ./.github/actions/yarn-nm-install
        with:
          cwd: "."
          install-mode: "update-lock-only"
          # Since we are in update-lock-only mode the resulting yarn cache is much smaller and less useful
          # for the rest of the steps. But since this is the first step and the cache is restored for each
          # step in the workflow, they all get the same useless cache unless we set a different prefix here:
          cache-prefix: "update-lock-file-for-prs"

      - name: "Commit and push changes if modified"
        id: sync-lock-file
        run: |
          if [[ $(git rev-parse --abbrev-ref HEAD) == "main" ]] && ! git diff-index --quiet HEAD; then
            echo "Lock file must not be modified by CI on main branch."
            exit 1;
          fi

          git config --global user.name 'UMA CI'
          git config --global user.email 'uma-ci@uma.me'
          git add -A
          git diff-index --quiet HEAD || git commit -nm "CI update lock file for PR"
          git push
          echo "$(git rev-parse HEAD)"
          echo "VERIFIED_LOCK_COMMIT=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

  checks:
    # Wait to see if the lock file should be updated before running checks:
    needs: "update-lock-file"
    runs-on: "ubuntu-22.04"
    steps:
      - name: "Checkout"
        uses: "actions/checkout@v3"
        with:
          ref: ${{ needs.update-lock-file.outputs.VERIFIED_LOCK_COMMIT }}

      - name: "Setup Node"
        uses: "actions/setup-node@v3"
        with:
          node-version-file: ".nvmrc"
          cache: "yarn"
          cache-dependency-path: "yarn.lock"

      - name: Install dependencies with yarn cache
        uses: ./.github/actions/yarn-nm-install
        with:
          cwd: "."

      - name: Restore turbo cache
        uses: actions/cache@v3
        with:
          path: ./node_modules/.cache/turbo
          # see https://bit.ly/43Til68 - we only need a single cache for all turbo files
          # but the cache still needs a unique id in order for it to properly save each time.
          # restore-keys will always take the latest matching cache:
          key: turbo-checks-${{ runner.os }}-${{ github.run_id }} # Can use time based key as well
          restore-keys: |
            turbo-checks-${{ runner.os }}

      - run: "yarn checks"

  # turbo doesn't seem to parallelize builds with checks although they don't depend on one another,
  # or else there's something in CI that prevents it from doing it well. Faster to keep them separate.
  build:
    # Wait to see if the lock file should be updated before running checks:
    needs: "update-lock-file"
    runs-on: "ubuntu-22.04"
    steps:
      - name: "Checkout"
        uses: "actions/checkout@v3"
        with:
          ref: ${{ needs.update-lock-file.outputs.VERIFIED_LOCK_COMMIT }}

      - name: "Setup Node"
        uses: "actions/setup-node@v3"
        with:
          node-version-file: ".nvmrc"
          cache: "yarn"
          cache-dependency-path: "yarn.lock"

      - name: yarn install with cache
        uses: ./.github/actions/yarn-nm-install
        with:
          cwd: "."

      - name: Restore turbo cache
        uses: actions/cache@v3
        with:
          path: ./node_modules/.cache/turbo
          # see https://bit.ly/43Til68 - we only need a single cache for all turbo files
          # but the cache still needs a unique id in order for it to properly save each time.
          # restore-keys will always take the latest matching cache:
          key: turbo-build-${{ runner.os }}-${{ github.run_id }} # Can use time based key as well
          restore-keys: |
            turbo-build-${{ runner.os }}

      - run: "yarn build"

  release:
    name: Release
    needs: ["checks", "build"]
    permissions:
      contents: write
      pull-requests: write
    if: "success() && github.event_name == 'push'"
    runs-on: ubuntu-latest
    environment: npm
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: "Setup Node"
        uses: "actions/setup-node@v3"
        with:
          node-version-file: ".nvmrc"
          cache: "yarn"
          cache-dependency-path: "yarn.lock"

      - name: Install dependencies with yarn cache
        uses: ./.github/actions/yarn-nm-install
        with:
          cwd: "."

      - name: Create Release Pull Request or Publish to npm
        id: changesets
        uses: changesets/action@v1
        with:
          # This expects you to have a script called release which does a build for your packages and calls changeset publish
          publish: yarn release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      # If the Version Packages PR has been created in the changesets step we should check if our workspace
      # package.json files have been updated from dependency bumps and update the lock file if so:
      - name: "Install dependencies with yarn cache"
        id: update-lock-file-for-version-packages-pr
        if: steps.changesets.outputs.published == 'false' && github.ref == 'refs/heads/main'
        uses: ./.github/actions/yarn-nm-install
        with:
          cwd: "."
          install-mode: "update-lock-only"

      # check if previous step updated the lock file and commit and push if so:
      - name: Update lock file for Version Packages PR
        if: steps.changesets.outputs.published == 'false' && github.ref == 'refs/heads/main'
        run: |
          if git ls-remote --exit-code --heads origin changeset-release/main; then
            git fetch origin changeset-release/main
            if git show-ref --quiet changeset-release/main; then
              git checkout changeset-release/main
              git push --set-upstream origin changeset-release/main
              git config --global user.name 'UMA CI'
              git config --global user.email 'uma-ci@uma.me'
              git add -A
              git diff-index --quiet HEAD || git commit -nm "CI update lock file for PR"
              git push
              echo "$(git rev-parse HEAD)"
            else
              echo "changeset-release/main branch does not exist locally."
            fi
          else
            echo "changeset-release/main branch does not exist on remote."
          fi
